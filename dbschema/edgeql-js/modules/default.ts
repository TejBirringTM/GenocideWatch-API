// GENERATED by @edgedb/generate v0.4.1

import * as $ from "../reflection";
import * as _ from "../imports";
import type * as _std from "./std";
export type $ContentType = {
  "Image": $.$expr_Literal<$ContentType>;
  "Video": $.$expr_Literal<$ContentType>;
  "Audio": $.$expr_Literal<$ContentType>;
  "Document": $.$expr_Literal<$ContentType>;
  "Dataset": $.$expr_Literal<$ContentType>;
} & $.EnumType<"default::ContentType", ["Image", "Video", "Audio", "Document", "Dataset"]>;
const ContentType: $ContentType = $.makeType<$ContentType>(_.spec, "a2da001b-7b1e-11ee-9345-0d744e8d1976", _.syntax.literal);

export type $EvidenceType = {
  "Direct Evidence: Photograph Footage": $.$expr_Literal<$EvidenceType>;
  "Direct Evidence: Film Footage": $.$expr_Literal<$EvidenceType>;
  "Direct Evidence: Audio Footage": $.$expr_Literal<$EvidenceType>;
  "Direct Evidence: Memo": $.$expr_Literal<$EvidenceType>;
  "Direct Evidence: Email": $.$expr_Literal<$EvidenceType>;
  "Direct Evidence: Social Media Post": $.$expr_Literal<$EvidenceType>;
  "Direct Evidence: Website Content": $.$expr_Literal<$EvidenceType>;
  "Direct Evidence: Interview": $.$expr_Literal<$EvidenceType>;
  "Direct Evidence: Witness Statement": $.$expr_Literal<$EvidenceType>;
  "Direct Evidence: Vlog": $.$expr_Literal<$EvidenceType>;
  "Direct Evidence: Other": $.$expr_Literal<$EvidenceType>;
  "Indirect Evidence: Report": $.$expr_Literal<$EvidenceType>;
  "Indirect Evidence: Research Paper": $.$expr_Literal<$EvidenceType>;
  "Indirect Evidence: Scientific Study": $.$expr_Literal<$EvidenceType>;
  "Indirect Evidence: Survey Data": $.$expr_Literal<$EvidenceType>;
  "Indirect Evidence: Expert Testimony": $.$expr_Literal<$EvidenceType>;
  "Indirect Evidence: Financial Record": $.$expr_Literal<$EvidenceType>;
  "Indirect Evidence: Medical Record": $.$expr_Literal<$EvidenceType>;
  "Indirect Evidence: Government Report": $.$expr_Literal<$EvidenceType>;
  "Indirect Evidence: Public Record": $.$expr_Literal<$EvidenceType>;
  "Indirect Evidence: Other": $.$expr_Literal<$EvidenceType>;
} & $.EnumType<"default::EvidenceType", ["Direct Evidence: Photograph Footage", "Direct Evidence: Film Footage", "Direct Evidence: Audio Footage", "Direct Evidence: Memo", "Direct Evidence: Email", "Direct Evidence: Social Media Post", "Direct Evidence: Website Content", "Direct Evidence: Interview", "Direct Evidence: Witness Statement", "Direct Evidence: Vlog", "Direct Evidence: Other", "Indirect Evidence: Report", "Indirect Evidence: Research Paper", "Indirect Evidence: Scientific Study", "Indirect Evidence: Survey Data", "Indirect Evidence: Expert Testimony", "Indirect Evidence: Financial Record", "Indirect Evidence: Medical Record", "Indirect Evidence: Government Report", "Indirect Evidence: Public Record", "Indirect Evidence: Other"]>;
const EvidenceType: $EvidenceType = $.makeType<$EvidenceType>(_.spec, "a2da2ca2-7b1e-11ee-87fe-a5191e891757", _.syntax.literal);

export type $IncidentType = {
  "Forced Labour": $.$expr_Literal<$IncidentType>;
  "Cyberattack and Espionage": $.$expr_Literal<$IncidentType>;
  "Surveillance": $.$expr_Literal<$IncidentType>;
  "Verbal and Psychological Aggression": $.$expr_Literal<$IncidentType>;
  "Vandalism": $.$expr_Literal<$IncidentType>;
  "Sabotage and Arson": $.$expr_Literal<$IncidentType>;
  "Environment Destruction": $.$expr_Literal<$IncidentType>;
  "Civil Infrastructure Destruction": $.$expr_Literal<$IncidentType>;
  "Assault": $.$expr_Literal<$IncidentType>;
  "Armed Assault": $.$expr_Literal<$IncidentType>;
  "Firearm Assault": $.$expr_Literal<$IncidentType>;
  "Military Assault": $.$expr_Literal<$IncidentType>;
  "Missile Strike and Bombardment": $.$expr_Literal<$IncidentType>;
  "Chemical and Biological Attack": $.$expr_Literal<$IncidentType>;
  "Torture": $.$expr_Literal<$IncidentType>;
  "Sexual Violence": $.$expr_Literal<$IncidentType>;
  "Desecration and Destruction of Heritage Site": $.$expr_Literal<$IncidentType>;
  "Detention, Abduction, and Kidnapping": $.$expr_Literal<$IncidentType>;
  "Dispossession, Theft, Robbery, and Extortion": $.$expr_Literal<$IncidentType>;
} & $.EnumType<"default::IncidentType", ["Forced Labour", "Cyberattack and Espionage", "Surveillance", "Verbal and Psychological Aggression", "Vandalism", "Sabotage and Arson", "Environment Destruction", "Civil Infrastructure Destruction", "Assault", "Armed Assault", "Firearm Assault", "Military Assault", "Missile Strike and Bombardment", "Chemical and Biological Attack", "Torture", "Sexual Violence", "Desecration and Destruction of Heritage Site", "Detention, Abduction, and Kidnapping", "Dispossession, Theft, Robbery, and Extortion"]>;
const IncidentType: $IncidentType = $.makeType<$IncidentType>(_.spec, "4eacb472-874f-11ee-ac60-f173ec89ab73", _.syntax.literal);

export type $UserRole = {
  "Administrator": $.$expr_Literal<$UserRole>;
  "Editor": $.$expr_Literal<$UserRole>;
  "Contributor": $.$expr_Literal<$UserRole>;
  "User": $.$expr_Literal<$UserRole>;
} & $.EnumType<"default::UserRole", ["Administrator", "Editor", "Contributor", "User"]>;
const UserRole: $UserRole = $.makeType<$UserRole>(_.spec, "cd63684b-81cd-11ee-b4ab-335b04f56950", _.syntax.literal);

export type $BaseλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "tags": $.PropertyDesc<$.ArrayType<_std.$str>, $.Cardinality.AtMostOne, false, false, false, false>;
  "notes": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
}>;
type $Base = $.ObjectType<"default::Base", $BaseλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $Base = $.makeType<$Base>(_.spec, "a2d4faf4-7b1e-11ee-9fca-09f428238db3", _.syntax.literal);

const Base: $.$expr_PathNode<$.TypeSet<$Base, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Base, $.Cardinality.Many), null);

export type $EvidenceλShape = $.typeutil.flatten<$BaseλShape & {
  "contentHash": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "contentType": $.PropertyDesc<$ContentType, $.Cardinality.One, false, false, false, false>;
  "evidenceType": $.PropertyDesc<$EvidenceType, $.Cardinality.One, false, false, false, false>;
  "title": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "authors": $.LinkDesc<$Individual, $.Cardinality.Many, {}, false, false,  false, false>;
  "context": $.LinkDesc<$GenocideContext, $.Cardinality.One, {}, false, false,  false, false>;
  "individualPublishers": $.LinkDesc<$Individual, $.Cardinality.Many, {}, false, false,  false, false>;
  "organisationalPublishers": $.LinkDesc<$Organisation, $.Cardinality.Many, {}, false, false,  false, false>;
  "contentURL": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "dateTime": $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne, false, false, false, false>;
  "geoCoord": $.PropertyDesc<$.NamedTupleType<{lat: _std.$float32, lng: _std.$float32}>, $.Cardinality.AtMostOne, false, false, false, false>;
  "incidentType": $.PropertyDesc<$.ArrayType<$IncidentType>, $.Cardinality.One, false, false, false, false>;
  "<published[is Individual]": $.LinkDesc<$Individual, $.Cardinality.Many, {}, false, false,  false, false>;
  "<authored[is Individual]": $.LinkDesc<$Individual, $.Cardinality.Many, {}, false, false,  false, false>;
  "<testimonies[is GenocideContext]": $.LinkDesc<$GenocideContext, $.Cardinality.Many, {}, false, false,  false, false>;
  "<published[is Organisation]": $.LinkDesc<$Organisation, $.Cardinality.Many, {}, false, false,  false, false>;
  "<published[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<authored[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<authored": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<published": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<testimonies": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Evidence = $.ObjectType<"default::Evidence", $EvidenceλShape, null, [
  ...$Base['__exclusives__'],
]>;
const $Evidence = $.makeType<$Evidence>(_.spec, "a2da6195-7b1e-11ee-b8cb-19ddc925c450", _.syntax.literal);

const Evidence: $.$expr_PathNode<$.TypeSet<$Evidence, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Evidence, $.Cardinality.Many), null);

export type $GenocideContextλShape = $.typeutil.flatten<$BaseλShape & {
  "slug": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "testimonies": $.LinkDesc<$Evidence, $.Cardinality.Many, {}, false, true,  false, false>;
  "mapDefaultGeoCoord": $.PropertyDesc<$.NamedTupleType<{lat: _std.$float32, lng: _std.$float32}>, $.Cardinality.AtMostOne, false, false, false, false>;
  "mapDefaultZoom": $.PropertyDesc<_std.$int16, $.Cardinality.AtMostOne, false, false, false, false>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "nTestimonies": $.PropertyDesc<_std.$int64, $.Cardinality.One, false, true, false, false>;
  "<context[is Evidence]": $.LinkDesc<$Evidence, $.Cardinality.Many, {}, false, false,  false, false>;
  "<context": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $GenocideContext = $.ObjectType<"default::GenocideContext", $GenocideContextλShape, null, [
  ...$Base['__exclusives__'],
]>;
const $GenocideContext = $.makeType<$GenocideContext>(_.spec, "da089f16-7c09-11ee-9a6b-6f65ccba15c5", _.syntax.literal);

const GenocideContext: $.$expr_PathNode<$.TypeSet<$GenocideContext, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($GenocideContext, $.Cardinality.Many), null);

export type $OnlinePresenceλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "email": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "facebook": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "instagram": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "linkedIn": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "locals": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "patreon": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "rumble": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "website": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "twitter": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "telegram": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
}>;
type $OnlinePresence = $.ObjectType<"default::OnlinePresence", $OnlinePresenceλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $OnlinePresence = $.makeType<$OnlinePresence>(_.spec, "a2e2aecb-7b1e-11ee-b349-d714da898ab3", _.syntax.literal);

const OnlinePresence: $.$expr_PathNode<$.TypeSet<$OnlinePresence, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($OnlinePresence, $.Cardinality.Many), null);

export type $IndividualλShape = $.typeutil.flatten<$BaseλShape & $OnlinePresenceλShape & {
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "published": $.LinkDesc<$Evidence, $.Cardinality.Many, {}, false, true,  false, false>;
  "authored": $.LinkDesc<$Evidence, $.Cardinality.Many, {}, false, true,  false, false>;
  "nAuthored": $.PropertyDesc<_std.$int64, $.Cardinality.One, false, true, false, false>;
  "nPublished": $.PropertyDesc<_std.$int64, $.Cardinality.One, false, true, false, false>;
  "<authors[is Evidence]": $.LinkDesc<$Evidence, $.Cardinality.Many, {}, false, false,  false, false>;
  "<individualPublishers[is Evidence]": $.LinkDesc<$Evidence, $.Cardinality.Many, {}, false, false,  false, false>;
  "<authors": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<individualPublishers": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Individual = $.ObjectType<"default::Individual", $IndividualλShape, null, [
  ...$Base['__exclusives__'],
  ...$OnlinePresence['__exclusives__'],
]>;
const $Individual = $.makeType<$Individual>(_.spec, "a2e9a4e8-7b1e-11ee-aec1-19749aa9b84a", _.syntax.literal);

const Individual: $.$expr_PathNode<$.TypeSet<$Individual, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Individual, $.Cardinality.Many), null);

export type $OrganisationλShape = $.typeutil.flatten<$BaseλShape & $OnlinePresenceλShape & {
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "published": $.LinkDesc<$Evidence, $.Cardinality.Many, {}, false, true,  false, false>;
  "nPublished": $.PropertyDesc<_std.$int64, $.Cardinality.One, false, true, false, false>;
  "<organisationalPublishers[is Evidence]": $.LinkDesc<$Evidence, $.Cardinality.Many, {}, false, false,  false, false>;
  "<organisationalPublishers": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Organisation = $.ObjectType<"default::Organisation", $OrganisationλShape, null, [
  ...$Base['__exclusives__'],
  ...$OnlinePresence['__exclusives__'],
]>;
const $Organisation = $.makeType<$Organisation>(_.spec, "a2f2e186-7b1e-11ee-a1ff-65cc2b57635d", _.syntax.literal);

const Organisation: $.$expr_PathNode<$.TypeSet<$Organisation, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Organisation, $.Cardinality.Many), null);

export type $UserλShape = $.typeutil.flatten<$IndividualλShape & {
  "email": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "role": $.PropertyDesc<$UserRole, $.Cardinality.One, false, false, false, false>;
  "awaitingDeletion": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne, false, false, false, false>;
}>;
type $User = $.ObjectType<"default::User", $UserλShape, null, [
  ...$Individual['__exclusives__'],
]>;
const $User = $.makeType<$User>(_.spec, "cd63fb65-81cd-11ee-92e1-9f36473f3c9c", _.syntax.literal);

const User: $.$expr_PathNode<$.TypeSet<$User, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($User, $.Cardinality.Many), null);



export { ContentType, EvidenceType, IncidentType, UserRole, $Base, Base, $Evidence, Evidence, $GenocideContext, GenocideContext, $OnlinePresence, OnlinePresence, $Individual, Individual, $Organisation, Organisation, $User, User };

type __defaultExports = {
  "ContentType": typeof ContentType;
  "EvidenceType": typeof EvidenceType;
  "IncidentType": typeof IncidentType;
  "UserRole": typeof UserRole;
  "Base": typeof Base;
  "Evidence": typeof Evidence;
  "GenocideContext": typeof GenocideContext;
  "OnlinePresence": typeof OnlinePresence;
  "Individual": typeof Individual;
  "Organisation": typeof Organisation;
  "User": typeof User
};
const __defaultExports: __defaultExports = {
  "ContentType": ContentType,
  "EvidenceType": EvidenceType,
  "IncidentType": IncidentType,
  "UserRole": UserRole,
  "Base": Base,
  "Evidence": Evidence,
  "GenocideContext": GenocideContext,
  "OnlinePresence": OnlinePresence,
  "Individual": Individual,
  "Organisation": Organisation,
  "User": User
};
export default __defaultExports;
